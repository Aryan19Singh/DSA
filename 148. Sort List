/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
ListNode* Mid(ListNode* head){
    ListNode* slow=head;
    ListNode* fast=head;

    while(fast->next!=NULL && fast->next->next != NULL){
        fast=fast->next->next;
        slow=slow->next;
    }
    return slow;
}
ListNode* MergeSortedList(ListNode* p1, ListNode* p2) {
    ListNode dummy(0);  // Create a dummy node.
    ListNode* curr = &dummy;  // Initialize curr with the dummy node.

    while (p1 != NULL && p2 != NULL) {
        if (p1->val < p2->val) {
            curr->next = p1;
            p1 = p1->next;
        } else {
            curr->next = p2;
            p2 = p2->next;
        }
        curr = curr->next;
    }

    // Connect the remaining part of the non-empty list.
    if (p1 != NULL) {
        curr->next = p1;
    } else {
        curr->next = p2;
    }

    return dummy.next;  // Return the merged list without the dummy node.
}


    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL){
            return head;
        }
         ListNode* mid=Mid(head);
         ListNode* newhead=mid->next;
         mid->next=NULL;

         ListNode* left_half=sortList(head);
         ListNode* right_half=sortList(newhead);

         return MergeSortedList(left_half,right_half);
    }
};
